geom_sf(data = espacios_verdes, fill = "darkseagreen", color = NA, alpha = .5) +
geom_sf(data = calles, alpha = 0.1, size = .05) +
theme_map
knitr::include_graphics("../Encuesta/fotos/llenado_touchscreen.png")
knitr::include_graphics("../Encuesta/fotos/llenado_tablet.png")
tabla_encuesta <- tribble(
~Evento,~Fecha, ~`Encuestas válidas`, ~`Total acumulado`,
#------------------|-------------|------|-----
"Parque Centenario", "12/05/2019",   16,  15,
"CCR",               "23/06/2019",  115, 131,
"CMD",               "02/07/2019",  128, 259,
"CMD",               "03/07/2019",  133, 392
)
tabla_encuesta %>%
knitr::kable(format = "latex",
booktabs = T,
align = "r",
caption = "Sitios de encuesta y cantidad de respuestas válidas obtenidas") %>%
kable_styling(latex_options = c("striped"))
fecha_de_datos <- "29 de julio de 2019"
n_alumnos <- nrow(alumnos)
alumnos_activos <- filter(alumnos, con_transacciones) %>%
mutate(tipo__domicilio = case_when(
tipo__domicilio == "Barrio Social y Villas" ~ "CABA - asentamiento precario",
tipo__domicilio == "Fuera de CABA" ~ "Fuera de CABA",
TRUE ~ "CABA"),
tipo__domicilio = fct_infreq(tipo__domicilio))
n_alumnos_activos <- nrow(alumnos_activos)
pct_activos <- (n_alumnos_activos / n_alumnos) * 100
pct_residencia <- prop.table(table(alumnos_activos$tipo__domicilio))
alumnos_activos %>%
count(tipo__domicilio) %>%
mutate(pct = round(n / sum(n), 2)) %>%
ggplot() +
geom_col(aes(x = tipo__domicilio, y = pct, fill = tipo__domicilio)) +
labs(x = NULL,
y = NULL) +
scale_fill_brewer(palette = "Dark2") +
scale_y_percent(limits = c(0, 1), breaks = c(0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1)) +
guides(fill = FALSE) +
theme_minimalista
ggplot() +
geom_sf(data = radios, aes(fill = decil_NSE), color = NA, alpha = .6) +
geom_sf(data = calles, alpha = 0.1, size = .1) +
scale_fill_viridis_c(breaks = 1:10, option = "plasma" , na.value="gray90") +
guides(fill = guide_legend(override.aes = list(alpha = .6), reverse = TRUE)) +
theme_map +
labs(caption = "a mayor decil, mayor NSE",
fill = "decil")
izquierda <- mapabase +
geom_point(data = filter(alumnos_activos, !is.na(decil_NSE)),
aes(x = lng_domicilio, y = lat_domicilio, color = decil_NSE),
alpha = .6) +
scale_color_viridis_c(option = "plasma", breaks = 1:10) +
guides(color = FALSE) +
theme_map +
labs(color = "decil")
freq_tx <- transacciones %>%
group_by(Nro_Doc) %>%
summarise(freq = n(),
variedad_rubros = length(unique(Rubro))) %>%
left_join(select(alumnos_activos, Nro_Doc = num__docum, decil_NSE, tipo__domicilio)) %>%
filter(!is.na(decil_NSE))
derecha <- freq_tx %>%
count(decil_NSE) %>%
ggplot() +
geom_col(aes(x = as.factor(decil_NSE), y = n, fill = decil_NSE), alpha = .6) +
scale_fill_viridis_c(option = "plasma") +
guides(fill = FALSE) +
labs(title = " ",
subtitle = " ",
x = "decil NSE",
y = "cantidad",
caption = "a mayor decil corresponde mayor NSE") +
theme_minimalista
izquierda + derecha
ggplot() +
geom_boxplot(data = freq_tx, aes(x = as.factor(decil_NSE), y = freq), color = "grey90", fill = NA) +
geom_jitter(data = freq_tx, aes(x = as.factor(decil_NSE), y = freq, color = decil_NSE)) +
geom_smooth(data = freq_tx, aes(x = decil_NSE, y = freq), method = lm, se = FALSE) +
scale_color_viridis_c(option = "plasma") +
guides(color = FALSE) +
labs(caption = "cada punto representa un beneficiario activo",
x = "decil NSE",
y = "cantidad") +
theme_minimalista
modelo <- lm(freq ~ decil_NSE, data = freq_tx)
# p-value ~ 0.13
#summary(modelo)
ggplot() +
geom_sf(data = radios, aes(fill = decil_NSE), color = NA, alpha = .6) +
geom_point(data = filter(transacciones_geo, !is.na(Rubro)) %>%
select(Rubro, lon, lat) %>%
distinct(),
aes(x = lon, y = lat, color = Rubro),
size = 4) +
scale_fill_viridis_c(option = "plasma", breaks = c(1, 10),
labels = c("bajo", "alto"), na.value="gray90") +
scale_color_brewer(palette = "Dark2") +
guides(color = guide_legend(override.aes = list(alpha = .8), reverse = TRUE)) +
theme_map +
labs(color = "Rubro",
fill = "NSE del área")
# agregamos los domicilios de les alumnes y trazamos las lineas que unen los puntos
# del lugar de residencia con los de la oferta cultural consumida
# "lineas de deseo" o desire lines en la parla del transporte
# funcion que crea una linea (linestring)
# a partir de una fila con cuatro coordenadas
st_segment = function(r){st_linestring(t(matrix(unlist(r), 2, 2)))}
# > st_segment(lineas_deseo[1,c(7,8,2,3)])
# LINESTRING (-58.44075 -34.64887, -58.46238 -34.62933)
lineas_deseo <- transacciones_geo %>%
filter(!is.na(lon)) %>%
transmute(num__docum = Nro_Doc, lng_oferta = lon, lat_oferta = lat) %>%
group_by(num__docum, lng_oferta, lat_oferta) %>%
summarise(freq = n()) %>%
ungroup() %>%
left_join(select(alumnos_activos, num__docum, decil_NSE,
tipo__domicilio, lng_domicilio, lat_domicilio)) %>%
filter(!is.na(decil_NSE))
st_desire_line <- function(lng0, lat0, lng1, lat1) {
st_linestring(matrix(c(lng0, lng1, lat0, lat1), 2, 2))
}
lineas_deseo <- lineas_deseo %>%
transmute(lng0 = lng_domicilio, lat0 = lat_domicilio, lng1 = lng_oferta, lat1 = lat_oferta) %>%
pmap(st_desire_line) %>%
st_as_sfc(crs = 4326) %>%
{cbind(lineas_deseo, geometry = .)} %>%
st_sf()
lineas_deseo <- lineas_deseo %>%
mutate(distancia = as.numeric(st_length(.)))
ggplot() +
geom_boxplot(data = lineas_deseo, aes(x = as.factor(decil_NSE), y = distancia), color = "grey90", fill = NA) +
geom_jitter(data = lineas_deseo, aes(x = as.factor(decil_NSE), y = distancia, color = decil_NSE)) +
geom_smooth(data = lineas_deseo, aes(x = decil_NSE, y = distancia), method = lm, se = FALSE) +
scale_color_viridis_c(option = "plasma") +
guides(color = FALSE) +
labs(caption = "cada punto representa un evento de consumo cultural",
x = "decil NSE del participante",
y = "distancia al domicilio (m)") +
theme_minimalista
modelo_nse_distancia <- lm(data = lineas_deseo, distancia ~ decil_NSE)
options(scipen = 20)
# Print with n digits of precision
fixed_digits <- function(xs, n = 2) {
formatC(xs, digits = n, format = "f")
}
# Print three digits of a p-value, but use
# the "< .001" notation on tiny values.
format_pval <- function(ps, html = FALSE) {
tiny <- ifelse(html, "&lt;&nbsp;.001", "< .001")
ps_chr <- ps %>% fixed_digits(3)
ps_chr[ps < 0.001] <- tiny
ps_chr
}
# Corregir nombres
fix_names <- . %>%
str_replace(".Intercept.", "constante")
format_model_table <- . %>%
mutate_at(vars(estimate:statistic), funs(fixed_digits)) %>%
mutate(term = fix_names(term),
p.value = format_pval(p.value))
modelo_nse_distancia %>%
broom::tidy() %>%
format_model_table() %>%
select(term, estimate, p.value) %>%
set_names(c("variable", "efecto", "p-valor")) %>%
knitr::kable(format = "latex",
booktabs = T,
align = "r",
caption = "Beneficiarios: distancia a oferta cultural consumida vs. NSE") %>%
kable_styling(latex_options = c("striped")) %>%
footnote(general = "Regresión lineal (resumen)",
general_title = "")
# Asignamos a cada escuela su radio censal y NSE
escuelas_activas <- alumnos_activos %>%
select(nombre__institucion, CUE_institucion:lat_institucion) %>%
distinct() %>%
filter(!is.na(lat_institucion))
escuelas_activas <- escuelas_activas %>%
st_as_sf(coords = c("lng_institucion", "lat_institucion"), crs = 4326) %>%
st_join(select(radios, decil_NSE)) %>%
select(CUE_institucion, decil_NSE_escuela = decil_NSE) %>%
{left_join(escuelas_activas, .)}
tx_escuelas <- transacciones_geo %>%
transmute(num__docum = Nro_Doc) %>%
left_join(select(alumnos_activos,
num__docum, CUE_institucion)) %>%
left_join(select(escuelas_activas,
nombre__institucion, nivel_educativo_institucion, CUE_institucion, lng_institucion, lat_institucion, decil_NSE_escuela)) %>%
group_by(CUE_institucion, nombre__institucion, nivel_educativo_institucion,
lng_institucion, lat_institucion, decil_NSE_escuela) %>%
summarise(freq = n()) %>%
ungroup()
plot_tx_escuelas <- ggplot() +
geom_sf(data = radios, aes(fill = decil_NSE), color = NA, alpha = .6) +
geom_point(data = tx_escuelas,
aes(x = lng_institucion, y = lat_institucion, size = freq), shape = 1) +
scale_fill_viridis_c(option = "plasma", breaks = c(1, 10),
labels = c("bajo", "alto"), na.value="gray90") +
scale_color_brewer(palette = "Dark2") +
guides(color = guide_legend(override.aes = list(alpha = .8), reverse = TRUE)) +
theme_map +
labs(size = "transacciones",
fill = "NSE del área") +
theme(legend.background=element_blank())
alumnos_activos_escuelas <- alumnos_activos %>%
group_by(CUE_institucion, nombre__institucion, nivel_educativo_institucion,
lng_institucion, lat_institucion) %>%
summarise(alumnos_activos = n()) %>%
ungroup()
plot_activos_escuelas <- ggplot() +
geom_sf(data = radios, aes(fill = decil_NSE), color = NA, alpha = .6) +
geom_point(data = alumnos_activos_escuelas,
aes(x = lng_institucion, y = lat_institucion, size = alumnos_activos), shape = 1) +
scale_fill_viridis_c(option = "plasma", breaks = c(1, 10),
labels = c("bajo", "alto"), na.value="gray90") +
scale_color_brewer(palette = "Dark2") +
guides(color = guide_legend(override.aes = list(alpha = .8), reverse = TRUE)) +
theme(legend.background = element_blank()) +
theme_map +
labs(size = "alumnos activos en escuela",
fill = "NSE del área")
# Por ahora solo mostrar TX
plot_tx_escuelas
# no correlation
#lm(data = tx_escuelas, freq ~ decil_NSE_escuela) %>% summary()
lineas_deseo_escuelas <- transacciones_geo %>%
filter(!is.na(lon)) %>%
transmute(num__docum = Nro_Doc, lng_oferta = lon, lat_oferta = lat) %>%
left_join(select(alumnos_activos,
num__docum, CUE_institucion)) %>%
left_join(select(escuelas_activas,
nombre__institucion, nivel_educativo_institucion, CUE_institucion, lng_institucion, lat_institucion, decil_NSE_escuela)) %>%
group_by(CUE_institucion, lng_oferta, lat_oferta) %>%
summarise(freq = n(),
nombre__institucion = last(nombre__institucion),
nivel_educativo_institucion = last(nivel_educativo_institucion),
decil_NSE_escuela = last(decil_NSE_escuela),
lng_institucion = last(lng_institucion),
lat_institucion = last(lat_institucion)) %>%
ungroup()  %>%
filter(!is.na(decil_NSE_escuela))
lineas_deseo_escuelas <- lineas_deseo_escuelas %>%
transmute(lng0 = lng_institucion, lat0 = lat_institucion, lng1 = lng_oferta, lat1 = lat_oferta) %>%
pmap(st_desire_line) %>%
st_as_sfc(crs = 4326) %>%
{cbind(lineas_deseo_escuelas, geometry = .)} %>%
st_sf()
lineas_deseo_escuelas <- lineas_deseo_escuelas %>%
mutate(distancia = as.numeric(st_length(.)))
ggplot() +
geom_boxplot(data = lineas_deseo_escuelas,
aes(x = as.factor(decil_NSE_escuela), y = distancia),
color = "grey90", fill = NA) +
geom_jitter(data = lineas_deseo_escuelas,
aes(x = as.factor(decil_NSE_escuela),
y = distancia, color = decil_NSE_escuela)) +
geom_smooth(data = lineas_deseo_escuelas,
aes(x = decil_NSE_escuela, y = distancia),
method = lm, se = FALSE) +
scale_color_viridis_c(option = "plasma") +
guides(color = FALSE) +
labs(caption = "cada punto representa un evento de consumo cultural",
x = "decil NSE del participante",
y = "distancia al domicilio (m)") +
theme_minimalista
modelo_nse_distancia_escuelas <- lm(data = lineas_deseo_escuelas, distancia ~ decil_NSE_escuela)
modelo_nse_distancia_escuelas %>%
broom::tidy() %>%
format_model_table() %>%
select(term, estimate, p.value) %>%
set_names(c("variable", "efecto", "p-valor")) %>%
knitr::kable(format = "latex",
booktabs = T,
align = "r",
caption = "Escuelas: distancia a oferta cultural consumida vs. NSE") %>%
kable_styling(latex_options = c("striped")) %>%
footnote(general = "Regresión lineal (resumen)",
general_title = "")
celdas_caba <- st_read("../entregables/data auxiliar/transporte_publico/caba_particionada_200_celdas.geojson",
quiet = TRUE)
readRDS("plot_rutas.Rds")
# asignar a cada transaccion sus celdas
transacciones_geo <- transacciones_geo %>%
filter(!is.na(lon)) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, remove = FALSE) %>%
st_join(celdas_caba) %>%
rename(celda = id) %>%
st_set_geometry(NULL)
# y a cada beneficiario y a su escuela
alumnos_activos <- alumnos_activos %>%
as_tibble() %>%
filter(!is.na(lng_domicilio)) %>%
st_as_sf(coords = c("lng_domicilio", "lat_domicilio"), crs = 4326, remove = FALSE) %>%
st_join(celdas_caba) %>%
rename(celda_domicilio = id) %>%
st_set_geometry(NULL) %>%
{left_join(alumnos_activos, .)} %>%
filter(!is.na(lng_institucion)) %>% # Ahora a identificar celdas de la escuela
st_as_sf(coords = c("lng_institucion", "lat_institucion"), crs = 4326, remove = FALSE) %>%
st_join(celdas_caba) %>%
rename(celda_institucion = id) %>%
st_set_geometry(NULL) %>%
{left_join(alumnos_activos, .)}
# Ahora calculamos el tiempo de viaje entre domiclio y oferta, y entre escuela y oferta, para cada transacción
distancias <- read_csv("../entregables/data auxiliar/transporte_publico/rutas_transporte_publico_tabla.csv") %>%
# Los valores NA signifcan "inruteable". Les asignamos un codigo para filtrarlos luego
mutate(distance_m = ifelse(is.na(distance_m), -99, distance_m),
duration_s = ifelse(is.na(duration_s), -99, duration_s)) %>%
# Completamos la matriz de distancias apra los casos en que O y D son iguales
complete(O, D, fill = list(distance_m = 0, duration_s = 0)) %>%
# eliminamos pares inruteables
filter(distance_m != -99)
transacciones_geo <- transacciones_geo %>%
left_join(select(alumnos_activos, num__docum, sexo, decil_NSE,
CUE_institucion, celda_domicilio, celda_institucion),
by = c(Nro_Doc = "num__docum")) %>%
left_join(distancias, by = c("celda_domicilio" = "O", "celda" = "D")) %>%
rename(decil_NSE_alumo = decil_NSE,
distancia_domicilio = distance_m,
tiempo_domicilio = duration_s) %>%
left_join(distancias, by = c("celda_institucion" = "O", "celda" = "D")) %>%
rename(distancia_institucion = distance_m, tiempo_institucion = duration_s)
tiempos_de_viaje_hogares <- transacciones_geo %>%
filter(!is.na(Rubro)) %>%
mutate(tiempo_domicilio = tiempo_domicilio / 60,
tiempo_institucion = tiempo_institucion / 60) %>%
group_by(Rubro) %>%
summarise("n" = n(),
"tiempo de viaje promedio" = round(mean(tiempo_domicilio, na.rm = TRUE)),
"tiempo de viaje máximo" = round(max(tiempo_domicilio, na.rm = TRUE))) %>%
arrange(`tiempo de viaje promedio`)
tiempos_de_viaje_hogares %>%
knitr::kable(format = "latex",
booktabs = T,
align = "r",
caption = "Tiempo de viaje desde hogares a oferta cultural") %>%
kable_styling(latex_options = c("striped")) %>%
footnote(general = "Tiempo expresado en minutos, en transporte público",
general_title = "Nota: ")
# Funcion para calendar plots
calendarHeatmap <- function(dates, values, partialyear = FALSE, title = "", subtitle = "", legendtitle = ""){
# Parameter checks
if(missing(dates)){
stop("Need to specify a dates vector.")
}
if(missing(values)){
stop("Need to specify a values vector.")
}
if(!is.Date(dates)){
stop("dates vector need to be in Date format.")
}
if(length(dates) != length(values)){
stop("dates and values need to have the same length.")
}
# load required packages
require(ggplot2)
my_theme <- function() {
# Colors
color.background = "white"
color.text = "#22211d"
# Begin construction of chart
theme_bw(base_size=15) +
# Format background colors
theme(panel.background = element_rect(fill=color.background, color=color.background)) +
theme(plot.background  = element_rect(fill=color.background, color=color.background)) +
theme(panel.border     = element_rect(color=color.background)) +
theme(strip.background = element_rect(fill=color.background, color=color.background)) +
# Format the grid
theme(panel.grid.major = element_blank()) +
theme(panel.grid.minor = element_blank()) +
theme(axis.ticks       = element_blank()) +
# Format the legend
theme(legend.position = "bottom") +
theme(legend.text = element_text(size = 8, color = color.text)) +
theme(legend.title = element_text(size = 10, face = "bold", color = color.text)) +
# Format title and axis labels
theme(plot.title       = element_text(color=color.text, size=20, face = "bold")) +
theme(axis.text.x      = element_text(size=12, color="black")) +
theme(axis.text.y      = element_text(size=12, color="black")) +
theme(axis.title.x     = element_text(size=14, color="black", face = "bold")) +
theme(axis.title.y     = element_text(size=14, color="black", vjust=1.25)) +
theme(axis.text.x      = element_text(size=10, hjust = 0, color = color.text)) +
theme(axis.text.y      = element_text(size=10, color = color.text)) +
theme(strip.text       = element_text(face = "bold")) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
# create empty calendar
min.date <- as.Date(paste(format(min(dates), "%Y"),"-1-1",sep = ""))
max.date <- as.Date(paste(format(max(dates), "%Y"),"-12-31", sep = ""))
df <- data.frame(date = seq(min.date, max.date, by="days"), value = NA)
# fill in values
df$value[match(dates, df$date)] <- values
df$year  <-  as.factor(format(df$date, "%Y"))
df$month <- as.numeric(format(df$date, "%m"))
df$doy   <- as.numeric(format(df$date, "%j"))
#df$dow  <- as.numeric(format(df$date, "%u"))
#df$woy  <- as.numeric(format(df$date, "%W"))
df$dow <- as.numeric(format(df$date, "%w"))
df$woy <- as.numeric(format(df$date, "%U")) + 1
df$dowmapped <- ordered(df$dow, levels = 6:0)
levels(df$dowmapped) <- rev(c("domingo","lunes","martes","miércoles","jueves","viernes","sábado"))
get_lims <- function(dates) {
if (partialyear) {
c(min(week(dates)) -1 , max(week(dates)) + 1)
}
else {
c(2.5, 53)
}
}
get_breaks <- function(dates) {
if (partialyear) {
(length(unique(week(dates)))+1)/length(unique(month(dates)))*(1:length(unique(month(dates))))
}
else {
breaks = 53/12*(1:12)-1.5
}
}
get_labels <- function(dates) {
if (partialyear) {
c("Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic")[unique(month(dates))]
}
else {
c("Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dic")
}
}
g <- ggplot(df, aes(woy, dowmapped, fill = value)) +
geom_tile(colour = "darkgrey") +
facet_wrap(~year, ncol = 1) + # Facet for years
coord_equal(xlim = get_lims(dates)) + # square tiles
scale_x_continuous(breaks = get_breaks(dates),
labels = get_labels(dates)) +
my_theme() +
scale_fill_gradientn(colours = rev(c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")), na.value = "white",
name = legendtitle,
guide = guide_colorbar(
direction = "horizontal",
barheight = unit(2, units = "mm"),
barwidth = unit(75, units = "mm"),
title.position = 'top',
title.hjust = 0.5
)) +
labs(x = NULL,
y = NULL,
title = title,
subtitle = subtitle)
my.lines<-data.frame(x=numeric(),
y=numeric(),
xend=numeric(),
yend=numeric(),
year=character())
for(years in levels(df$year)){
df.subset <- df[df$year == years,]
y.start <- df.subset$dow[1]
x.start <- df.subset$woy[1]
x.top.left <- ifelse(y.start == 0, x.start - 0.5, x.start + 0.5)
y.top.left <- 7.5
x.top.right <- df.subset$woy[nrow(df.subset)] + 0.5
y.top.right <- 7.5
x.mid.left01 <- x.start - 0.5
y.mid.left01 <- 7.5 - y.start
x.mid.left02 <- x.start + 0.5
y.mid.left02 <- 7.5 - y.start
x.bottom.left <- x.start - 0.5
y.bottom.left <- 0.5
x.bottom.right <- ifelse(y.start == 6, df.subset$woy[nrow(df.subset)] + 0.5, df.subset$woy[nrow(df.subset)] - 0.5)
y.bottom.right <- 0.5
my.lines<-rbind(my.lines,
data.frame(x    = c(x.top.left, x.bottom.left, x.mid.left01, x.top.left, x.bottom.left),
y    = c(y.top.left, y.bottom.left, y.mid.left01, y.top.left, y.bottom.left),
xend = c(x.top.right, x.bottom.right, x.mid.left02, x.mid.left02, x.mid.left01),
yend = c(y.top.right, y.bottom.right, y.mid.left02, y.mid.left02, y.mid.left01),
year = years))
# lines to separate months
for (j in 1:12)  {
df.subset.month <- max(df.subset$doy[df.subset$month == j])
x.month <- df.subset$woy[df.subset.month]
y.month <- df.subset$dow[df.subset.month]
x.top.mid <- x.month + 0.5
y.top.mid <- 7.5
x.mid.mid01 <- x.month - 0.5
y.mid.mid01 <- 7.5 - y.month - 1
x.mid.mid02 <- x.month + 0.5
y.mid.mid02 <- 7.5 - y.month - 1
x.bottom.mid <- ifelse(y.month == 6, x.month + 0.5, x.month - 0.5)
y.bottom.mid <- 0.5
my.lines<-rbind(my.lines,
data.frame(x    = c(x.top.mid, x.mid.mid01, x.mid.mid01),
y    = c(y.top.mid, y.mid.mid01, y.mid.mid01),
xend = c(x.mid.mid02, x.mid.mid02, x.bottom.mid),
yend = c(y.mid.mid02, y.mid.mid02, y.bottom.mid),
year = years))
}
}
# add lines
g <- g + geom_segment(data=my.lines, aes(x,y,xend=xend, yend=yend), lineend = "square", color = "black", inherit.aes=FALSE)
return(g)
}
transacciones %>%
group_by(Fecha) %>%
summarise(total = n()) %>%
na.omit() %>%
{calendarHeatmap(.$Fecha, .$total)}
transacciones
transacciones %>% tally(Rubro)
transacciones %>% count(Rubro)
transacciones %>% count(Rubro) %>%
mutate(pct = n / sum(n))
656 + 298
656 + 298
